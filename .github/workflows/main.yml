name: Build

on:
  push:
    branches:
      - main
    tags:
      - "v*"

jobs:
  lint:
    name: ðŸ§¹ Lint / ðŸ“œ C++
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run clang-format style check
        uses: jidicula/clang-format-action@v4.9.0
        with:
          clang-format-version: "15"
          exclude-regex: "subprojects"

  build:
    strategy:
      fail-fast: false
      matrix:
        build_type: ["Debug", "Release"]
        config:
          - { name: "macOS-Clang", os: macos-latest, lib_ext: dylib }
          - { name: "linux-GCC", os: ubuntu-latest, lib_ext: so }
          - { name: "windows-MinGW", os: ubuntu-latest, lib_ext: dll }

    name: ðŸ›  Build / ${{ matrix.config.name }} (${{ matrix.build_type }})
    runs-on: ${{ matrix.config.os }}

    steps:
      # setup
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Python Dependencies
        run: pip install meson ninja

      - name: Install Dependencies (Ubuntu)
        if: matrix.config.os == 'ubuntu-latest'
        run: sudo apt update && sudo apt install uuid-dev wine64

      - name: Setup MinGW
        if: matrix.config.name == 'windows-MinGW'
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: "10G"
          key: ${{ matrix.config.name }}-${{ matrix.build_type }}

      # configure

      - name: Configure (MinGW Debug)
        if: matrix.build_type == 'Debug' && matrix.config.name == 'windows-MinGW'
        run: meson setup --cross-file cross/x86_64-w64-mingw32.txt builddir
        env:
          CCACHE_PREFIX: mingw32-

      - name: Configure (MinGW Release)
        if: matrix.build_type == 'Release' && matrix.config.name == 'windows-MinGW'
        run: meson setup --cross-file cross/x86_64-w64-mingw32.txt builddir -Dbuildtype=release
        env:
          CCACHE_PREFIX: mingw32-

      - name: Configure (Debug)
        if: matrix.build_type == 'Debug' && matrix.config.name != 'windows-MinGW'
        run: meson setup builddir

      - name: Configure (Release)
        if: matrix.build_type == 'Release' && matrix.config.name != 'windows-MinGW'
        run: meson setup builddir -Dbuildtype=release

      # compile

      - name: Compile
        if: matrix.config.name != 'windows-MinGW'
        run: meson compile -C builddir

      - name: Compile (MinGW)
        if: matrix.config.name == 'windows-MinGW'
        run: meson compile -C builddir
        env:
          CCACHE_PREFIX: mingw32-

      # upload artifacts

      - name: Find artifact
        if: ${{ success() }}
        id: locate
        run: |
          echo "LIB_PATH=$(find builddir -type f -name "*.${{ matrix.config.lib_ext }}")" >> "$GITHUB_OUTPUT"
          echo "$(find builddir -type f -name "*.${{ matrix.config.lib_ext }}")"

      - name: Upload Shared Library Artifact
        uses: actions/upload-artifact@v4
        if: ${{ success() }}
        with:
          name: ${{ github.event.repository.name }}-${{matrix.config.name}}-${{matrix.build_type}}
          path: |
            ${{ github.workspace }}/${{ steps.locate.outputs.LIB_PATH}}

      - name: Upload .gdextension Artifact
        uses: actions/upload-artifact@v4
        if: success() && matrix.config.name == 'linux-GCC' && matrix.build_type == 'Debug'
        with:
          name: gdextension
          path: |
            ${{ github.workspace }}/builddir/psvmgd.gdextension
